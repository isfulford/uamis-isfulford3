@model IEnumerable<uamis_isfulford3.Models.Movie>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IMDBLink)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Photo)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IMDBLink)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @if (item.Photo != null)
                {
                     //writes photo directly in the page, disadv: makes pages a lot bigger and browser gets upset
                     var base64 = Convert.ToBase64String(item.Photo);
                     var imgSrc = string.Format("data:image/jpg;base64, {0}", base64);

                     //img handler
                     <img src="@imgSrc" width="100" height="100" src="@Url.Action("GetMoviePhoto", "Movies", new{item.MovieId})" />

                }
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.MovieId">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.MovieId">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.MovieId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
